# Date type. See resolvers/Date.js
scalar Time

type Board {
  # board summary
  brdname: String!              # up to 12 chars (English) (super key)
  type: String!                 # "board" or "category"
  class: String!                # 類別 (4 chars)
  title: String                 # 板標，可中文，可為 null
  moderators: [String!]         # 板主 (username array)
  nuser: Int!                   # 人氣

  # board details
  post_limit_logins: Int        # 發文的登入門檻

  # contents
  articles: [Article!]          # if type === "board"
  boards: [Board!]              # if type === "category"
}

type Article {
  aid: String!                  # (super key)
  aidc: String                  # AIDc
  # summary
  brdname: String!              # 所屬看板 (brdname)
  title: String!
  create_time: Time!            # 發文時間
  owner: String!                # 文章作者 (username)
  type: String!                 # "normal", "re", "fw"
  deleted: Boolean!
  push: Int!                    # 推文數
  neutral: Int!                 # 箭頭數
  boo: Int!                     # 噓文數

  # detail
  content: String               # support only plaintext
  comments: [Comment!]
  location: Location!
  URL: String
  modified_time: Time           # 最後編輯時間
}

type Comment {
  cid: ID!                      # (super key)
  deleted: Boolean!
  
  type: String!                 # 推 (1) 、噓 (2) 、箭頭 (3)
  owner: String!                # 留言者 (username)
  content: String!              # support only plaintext (Limit: 1000 chars?)
  reply: String                 # reply from article owner
  location: Location!
  create_time: Time!            # 留言時間
}

type User {
   # summary (public)
  username: String!             # (super key)
  nickname: String
  login_days: Int!
  last_login: Time!
  last_location: Location!
  post: Int!                    # number of posts
  money: Int!

  # detail (private)
  realname: String
  first_login: Time

  # other setting
  fav_boards: [Board!]          # 我的最愛看板
  track_articles: [Article!]    # 追蹤文章清單
  fav_articles: [Article!]      # 收藏文章清單
  # mails: [Mail!]                # 站內信箱
}

type Location {
  ip: String!
  country: String
}

type Mail {
  mid: ID!                      # (super key)

  title: String!
  sender: MailSender!
  content: String!
}

type MailSender {
  type: String!                 # "user" or "system"
  user: String
  system: String
}

# See resolvers/Query.js
type Query {
  board(brdname: String!): Board
  boards(keywords: [String!]): [Board!]             # query all or search board
  article(aid: String!): Article
  articles(input: articlesInput!): [Article!]
  user(input: userInput!): User
  salt(username: String!): String
  
  hotBoards: [Board!]
  newestArticles(limit: Int): [Article!]
  hotArticles(input: HotArticlesInput): [Article!]
  # genHash(plaintext: String): String!     # just for backend testing
}

input HotArticlesInput {
  limit: Int
  timerange: Int          # hour
}

input articlesInput {
  brdname: [String!]      # support for searching in multiple boards
  owner: String           # exactly match
  title: [String!]
  timerange: Int          # hour
}

input userInput {
  username: String!
  password: String        # null if query other user
}

# See resolvers/Mutation.js
type Mutation {
  signup(input: SignupInput!): Boolean
  login(username: String!, password: String!): Boolean
  logout(username: String!, password: String!): Boolean

  # # Create an article
  createArticle(input: CreateArticleInput!): Boolean    # return null if failed
  # # Update an article
  updateArticle(input: UpdateArticleInput!): Boolean    # return null if failed
  # # Delete an article
  deleteArticle(input: DeleteArticleInput!): Boolean    # return null if failed

  # # create a comment
  createComment(input: CreateCommentInput!): Boolean    # return cid. return null if failed
  # # modify a comment
  # modifyComment(input: ModifyCommentInput!): Boolean    # return cid. return null if failed. only for moderator and article owner
  # # delete a comment
  # deleteComment(input: DeleteCommentInput!): Boolean    # return cid. return null if failed. only for moderator and article owner

  # # update favorite board list
  # updateFavBoards(input: UpdateFavBoardsInput!): Boolean           # return bid. return null if failed

  # # update a favorite article list
  # updateFavArticles(input: UpdateFavArticlesInput!): Boolean       # return bid. return null if failed


}

input SignupInput {
  username: String!
  password: String!         # encrypted
  salt: String!

  # other info...
  realname: String!
}

input Token {
  username: String!
  password: String!
}

input CreateArticleInput {
  token: Token!
  brdname: String!
  title: String!
  content: String!
}

input UpdateArticleInput {
  token: Token!
  aid: String!
  title: String!
  content: String!
  comment_reply: [CommentReply!]  # null if not change
}

input CommentReply {
  cid: ID!
  reply: String
}

input DeleteArticleInput {
  token: Token!
  aid: String!
}

input CreateCommentInput {
  token: Token!
  aid: String!
  type: Int!
  content: String!
}

# input UpdateCommentInput {
#   cid: ID!
#   comment: String!
# }

# input DeleteCommentInput {
#   cid: ID!
# }

input UpdateFavBoardsInput {
  token: Token!
  brdnames: [String!]
}

input UpdateFavAritclesInput {
  token: Token!
  aids: [String!]
}

# See resolvers/Subscription.js
# type Subscription {

# }
