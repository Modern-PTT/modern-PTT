# Date type. See resolvers/Date.js
scalar Time

type Board {
  # board summary
  brdname: String!              # up to 12 chars (English) (super key)
  type: String!                 # "board" or "category"
  class: String!                # 類別 (4 chars)
  title: String                 # 板標，可中文，可為 null
  moderator: [User!]            # 板主
  nuser: Int!                   # 人氣

  # board details
  post_limit_logins: Int        # 發文的登入門檻

  # contents
  articles: [Article!]          # if type === "board"
  boards: [Board!]              # if type === "category"
}

type Article {
  aid: String!                  # (super key)

  # summary
  board: Board!                 # 所屬看板
  title: String!
  create_time: Time!            # 發文時間
  owner: User!                  # 文章作者
  type: String!                 # "normal", "re", "fw"
  deleted: Boolean!
  push: Int!                    # 推文數
  boo: Int!                     # 噓文數

  # detail
  content: String              # support only plaintext
  comments: [Comment!]
  location: Location!
  URL: String
  last_modified_time: Time     # 最後編輯時間
}

type Comment {
  cid: ID!                      # (super key)
  article: Article!             # 所屬文章
  deleted: Boolean!
  
  type: String!                 # 推、噓、箭頭
  owner: User!                  # 留言者
  content: String!              # support only plaintext (Limit: 1000 chars?)
  reply: String                 # reply from article owner
  location: Location!
  create_time: Time!            # 留言時間
}

type User {
   # summary (public)
  username: String!             # (super key)
  nickname: String
  login_days: Int!
  last_login: Time!
  last_location: Location!
  post: Int!                    # number of posts
  money: Int!

  # detail (private)
  realname: String
  first_login: Time

  # other setting
  fav_boards: [Board!]          # 我的最愛看板
  track_articles: [Article!]    # 追蹤文章清單
  fav_articles: [Article!]      # 收藏文章清單
  mails: [Mail!]                # 站內信箱
}

type Location {
  ip: String!
  country: String!
}

type Mail {
  mid: ID!                      # (super key)

  title: String!
  sender: MailSender!
  content: String!
}

type MailSender {
  type: String!                 # "user" or "system"
  user: User
  system: String
}

type Token {
  token: String                 # can be null if authentication failed
}

# See resolvers/Query.js
# type Query {
#   hotBoards: [Board!]
#   hotArticles: [Article!]
#   category(catname: String!): [Board!]                 # can be null if in root category
#   board(brdname: String!): Board!
#   article(aid: String!): Article

#   searchBoard(input: SearchBoardInput!): [Board!]
#   searchArticle(input: SearchArticleInput!): [Article!]
# }

# Input for searching boards
input SearchBoardInput {
  keyword: [String!]!
}

# Input for searching articles
input SearchArticleInput {
  keyword: [String!]!
  brdname: [String!]                            # support for searching in multiple boards
}

# See resolvers/Mutation.js
# type Mutation {
#   signup(username: String!, password: String!): User
#   login(username: String!, password: String!): Token
#   logout(username: String!): User

#   # Create an article
#   createArticle(input: CreateArticleInput!): String     # return null if failed
#   # Update an article
#   updateArticle(input: UpdateArticleInput!): String     # return null if failed
#   # Delete an article
#   deleteArticle(input: DeleteArticleInput!): String     # return null if failed

#   # create a comment
#   createComment(input: CreateCommentInput!): ID         # return cid. return null if failed
#   # modify a comment
#   modifyComment(input: ModifyCommentInput!): ID         # return cid. return null if failed. only for moderator and article owner
#   # delete a comment
#   deleteComment(input: DeleteCommentInput!): ID         # return cid. return null if failed. only for moderator and article owner

#   # add a favorite board
#   createFavBoard(input: CreateFavBoardInput!): ID       # return bid. return null if failed
#   # move a favorite board
#   moveFavBoard(input: MoveFavBoardInput!): ID           # return bid. return null if failed
#   # delete a favorite board
#   deleteFavBoard(input: DeleteFavBoardInput!): bid      # return bid. return null if failed
# }

input CreateArticleInput {
  brdname: String!
  title: String!
  content: String!
}

input UpdateArticleInput {
  aid: String!
  title: String                   # null if not change
  content: String                 # null if not change
  comment_reply: [CommentReply!]  # null if not change
}

input CommentReply {
  cid: ID!
  reply: String!
}

input DeleteArticleInput {
  aid: String!
}

input CreateCommentInput {
  aid: String!
  comment: String!
}

input UpdateCommentInput {
  cid: ID!
  comment: String!
}

input DeleteCommentInput {
  cid: ID!
}

input CreateFavBoardInput {
  brdname: String!
}

input MoveFavBoardInput {
  brdname: String!
  order: Int!
}

input DeleteFavBoardInput {
  brdname: String!
}

# See resolvers/Subscription.js
# type Subscription {

# }
